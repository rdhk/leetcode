Ans. Note than 1,4 and 4, 5 are considered overlapping.

The most brute force way would be to find all the intervals 1,3 is overlapping with, and merge them.
But a better way is to sort the intervals by start and then end times.
After that the possible overlapping intervals will come side by side.

iterate each interval and if any interval is overlapping with last interval, ie its start prev < start < start end, it is obvious that since we have sorted the intervals by start times, s2 >= s1, so we just need to check if s2 <= end1 and if thats the case, keep the max of both ends as the end of the merged interval. Keep doing this for each interval.


def mergeIntervals(self, intervals):
	#[[1,6],[8,10],[15,18]]
	if len(intervals) <= 1: return intervals

	intervals.sort()
	result = [intervals[0]]
	
	for idx in range(1, len(intervals)):
		new_int_start, new_int_end = intervals[idx]
		last_int_end = result[-1][1]
		if new_int_start <= last_int_end:
			result[-1][1] = max(new_int_end, last_int_end)
		else:
			result.append(intervals[idx])

	return result
