class Solution:
    def findPairs(self, nums: List[int], k: int) -> int:
#     Brute Force:

#     For every ith el, look for ai +k and ai - k and max we can add 2 for each element and only look on its right side to avoid repeated pairs
#     nsq 

#     if we sort, [1,1,3,4,5] 2 pointers - nlogn + n 

#     if we keep a hash: 
#     3,1(2),     4(1), 5(1)
#     2

#     [1,2,4,4,3,3,0,9,2,3] k = 3
#     {0, 9 }
#     2

#     Keep removing leftmost to avoid repetition, handle k = 0 special case by counting freq

#     2 pass

#     can we do in 1 pass - yes - but its more complicated
      #[1,2,4,4,3,3,0,9,2,3]
      #make a set if k > 0 else eval on the go if k == 0 in a hashmap
    
    #We can also store the last occurence of every no to handle both cases
    #if k == 0 and idx num != curridx, then add to the result
    #keep removing the left element
    
      #[1,2,4,4,3,3,0,9,2,3] k = 0, 3
      # {1: 0, 2: 8, 4: 3, 3: 9, 0: 6, 9:7}
      result = 0
      hash_idxs = collections.Counter(nums)

      for num in hash_idxs:
        if k == 0:
          result += int(hash_idxs[num] > 1)
        elif k > 0:
          if num + k in hash_idxs:
            result += 1
          
      
      return result


      
