Under 25 mins logic and coding

#find row and then find col both by BS,
#Imporant edge cases, to check limits of lwest and highest elements in matrix
#also find if highest < tgt when found row
TC: O(log rows + log cols)

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
      
        if not matrix or not matrix[0]: return False
        rows, cols = len(matrix), len(matrix[0])
        
        if target < matrix[0][0] or target > matrix[rows-1][cols - 1]:
          return False
        
        l, r = 0, rows - 1
        
        #find row with start <= tgt
        while(l < r):
          mid = l + ((r - l + 1) >> 1)
          if matrix[mid][0] <= target:
            l = mid
          else:
            r = mid - 1
        
        row_no_start_lesser = l
        #highest element is lesser, not found
        if matrix[row_no_start_lesser][cols - 1] < target:
          return False
      
        l, r = 0, cols - 1
        
        #binary search
        while(l < r):
          mid = l + (r-l)//2
          if matrix[row_no_start_lesser][mid] < target:
            l = mid + 1
          else:
            r = mid
        return matrix[row_no_start_lesser][l] == target

#Treat it as a single array, and then perform BS, by calc single array idx, and turning to rows and cols
TC: log(cols*rows) = O(log rows + log cols)
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
      
        if not matrix or not matrix[0]: return False
        rows, cols = len(matrix), len(matrix[0])
        
        def get_idx(row_idx, col_idx):
          return row_idx * cols + col_idx
        
        def val_at_idx(idx):
          row_num, col_num = divmod(idx, cols)
          return matrix[row_num][col_num]
        
        low, high = get_idx(0, 0), get_idx(rows - 1, cols - 1)
        
        while(low < high):
          mid = low + (high-low)//2
          
          if val_at_idx(mid) < target:
            low = mid + 1
          else:
            high = mid
          
        return val_at_idx(high) == target
        
        
