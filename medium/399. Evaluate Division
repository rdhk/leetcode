Approach 1 - My approach

Since we realise the given equations are like a graph where vars are nodes and edges are directed with weight as a/b from a to b and b/a from b/a, 
if a path exists between any 2 nodes, then a /e = (a/b)*(b/c)*(c/d)*(d/e)

So we make a adjacency matrix(did this in order to cache all the quotients starting from curr node occuring from curr to dest)

like a -> d (a/a = 1, a/b = 2, b/c = 3(a/c = 6)), c/d = 4, (a/d = 24))
Keep doing dfs until you found the divisor, if u dont, return -1
TC: max queries * (v+e) = queries * (equations*2 + equations)
equations = e, nodes = 2e

class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        
        vars_to_idx = {}
        
        idx = 0
        for first, second in equations:
          for char in (first, second):
            if char not in vars_to_idx:
              vars_to_idx[char] = idx
              idx += 1
          
        adj_matrix = [['#']*len(vars_to_idx) for i in range(len(vars_to_idx))]
          
        for idx, (first, second) in enumerate(equations):
          adj_matrix[vars_to_idx[first]][vars_to_idx[second]] = values[idx]
          adj_matrix[vars_to_idx[second]][vars_to_idx[first]] = 1/values[idx]
        
        
        def dfs(start, curr, dest, product_until_now):
          nonlocal visited
          visited.add(curr)
          adj_matrix[start][curr] = product_until_now
          
          if curr == dest:
            return True
          
          found = False
          for neighbour in range(len(vars_to_idx)):
            if neighbour not in visited and adj_matrix[curr][neighbour] != '#':
              found = dfs(start, neighbour, dest, product_until_now*adj_matrix[curr][neighbour])
              if found: break
                
          return found
        
        answers = []
        for var1, var2 in queries:
          if var1 not in vars_to_idx or var2 not in vars_to_idx:
            answers.append(-1)
            continue
          
          idx1, idx2 = vars_to_idx[var1], vars_to_idx[var2]
          if idx1 == idx2: answers.append(1.0)
          elif adj_matrix[idx1][idx2] != '#':
            answers.append(adj_matrix[idx1][idx2])
          else:
            visited = set()
            found = dfs(idx1, idx1, idx2, 1)
            answers.append(adj_matrix[idx1][idx2] if found else -1)
        return answers
          
Approach 2:
Union Find
TC: O(equations) to build graph
O(queries) to get results of queries form union find

We can clearly say that the nodes which lie in same group can be evaluated to find the result(as a path exists bwetween them)
Like union find, we have self parents, and we store another value ratio which is child / parent ratio.

For each equation, we union both noded, update parent of n1 to parent of n2, and ratio of parent1 to that of parent 2 obtained by equations
    #quotient = div/divisor
    #ratio1 = dividend/p1
    #ratio2 = divisor/p2
    #p1 = dividend/r1, p2 = divisor/r2
    #p1/p2 = dividend*r2/(divisor *r1) = (quotient*r2)/r1
    
WHen doing find, continuosly do path compression, which here also means updating the ratio of node to its root, which is nothing but 
ratio_with_curr_parent* ratio_of_curr_parent_with_root

In the end when finding answers, if they belong to same group, then find gives us the ratio of a with root, and ratio of b with root.
Now division is nothing but a/parent divided by b/parent.

class UnionFind:
  def __init__(self):
    self.node_vs_group_ratio = {}
    
  def find(self, variable):
    #initialize if not already present
    if variable not in self.node_vs_group_ratio:
      self.node_vs_group_ratio[variable] = (variable, 1)
     
    #path compression
    group_id, ratio_with_parent = self.node_vs_group_ratio[variable]
    if variable != group_id:
      actual_group_id, ratio_of_parent_with_actual_parent = self.find(group_id)
      self.node_vs_group_ratio[variable] = (actual_group_id, ratio_with_parent*ratio_of_parent_with_actual_parent)
      
    return self.node_vs_group_ratio[variable]

  def union(self, dividend, divisor, quotient):
    p1, ratio_dividend = self.find(dividend)
    p2, ratio_divisor = self.find(divisor)
    
    if p1 == p2:
      return
    
    #quotient = div/divisor
    #ratio1 = dividend/p1
    #ratio2 = divisor/p2
    #p1 = dividend/r1, p2 = divisor/r2
    #p1/p2 = dividend*r2/(divisor *r1) = (quotient*r2)/r1
    self.node_vs_group_ratio[p1] = (p2, (quotient*ratio_divisor)/ratio_dividend)
    
    
  def get_quotient(self, dividend, divisor):
    parent1, ratio_with_parent1 = self.find(dividend)
    parent2, ratio_with_parent2 = self.find(divisor)
    
    if parent1 != parent2:
      return -1
    else:
      return ratio_with_parent1/ratio_with_parent2
    

class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        
      uf = UnionFind()
        
      for idx, (dividend, divisor) in enumerate(equations):
        quotient = values[idx]
        uf.union(dividend, divisor, quotient)
        
      answers = []
      for dividend, divisor in queries:
        if dividend not in uf.node_vs_group_ratio or divisor not in uf.node_vs_group_ratio:
          answers.append(-1)
        else:
          answers.append(uf.get_quotient(dividend, divisor))
          
      return answers
           
        
