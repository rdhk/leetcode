Approach 1 - My approach

Since we realise the given equations are like a graph where vars are nodes and edges are directed with weight as a/b from a to b and b/a from b/a, 
if a path exists between any 2 nodes, then a /e = (a/b)*(b/c)*(c/d)*(d/e)

So we make a adjacency matrix(did this in order to cache all the quotients starting from curr node occuring from curr to dest)

like a -> d (a/a = 1, a/b = 2, b/c = 3(a/c = 6)), c/d = 4, (a/d = 24))
Keep doing dfs until you found the divisor, if u dont, return -1
TC: max queries * (v+e) = queries * (equations*2 + equations)
equations = e, nodes = 2e

class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        
        vars_to_idx = {}
        
        idx = 0
        for first, second in equations:
          for char in (first, second):
            if char not in vars_to_idx:
              vars_to_idx[char] = idx
              idx += 1
          
        adj_matrix = [['#']*len(vars_to_idx) for i in range(len(vars_to_idx))]
          
        for idx, (first, second) in enumerate(equations):
          adj_matrix[vars_to_idx[first]][vars_to_idx[second]] = values[idx]
          adj_matrix[vars_to_idx[second]][vars_to_idx[first]] = 1/values[idx]
        
        
        def dfs(start, curr, dest, product_until_now):
          nonlocal visited
          visited.add(curr)
          adj_matrix[start][curr] = product_until_now
          
          if curr == dest:
            return True
          
          found = False
          for neighbour in range(len(vars_to_idx)):
            if neighbour not in visited and adj_matrix[curr][neighbour] != '#':
              found = dfs(start, neighbour, dest, product_until_now*adj_matrix[curr][neighbour])
              if found: break
                
          return found
        
        answers = []
        for var1, var2 in queries:
          if var1 not in vars_to_idx or var2 not in vars_to_idx:
            answers.append(-1)
            continue
          
          idx1, idx2 = vars_to_idx[var1], vars_to_idx[var2]
          if idx1 == idx2: answers.append(1.0)
          elif adj_matrix[idx1][idx2] != '#':
            answers.append(adj_matrix[idx1][idx2])
          else:
            visited = set()
            found = dfs(idx1, idx1, idx2, 1)
            answers.append(adj_matrix[idx1][idx2] if found else -1)
        return answers
          
Approach 2:
Union Find
TC: O(equations) to build graph
O(queries) to get results of queries form union find

We can clearly say that the nodes which lie in same group can be evaluated to find the result(as a path exists bwetween them)
Like union find, we have self parents, and we store another value ratio which is child / parent ratio.

For each equation, we union both noded, update parent of n1 to parent of n2, and ratio of parent1 to that of parent 2 obtained by equations
    #quotient = div/divisor
    #ratio1 = dividend/p1
    #ratio2 = divisor/p2
    #p1 = dividend/r1, p2 = divisor/r2
    #p1/p2 = dividend*r2/(divisor *r1) = (quotient*r2)/r1
    
WHen doing find, continuosly do path compression, which here also means updating the ratio of node to its root, which is nothing but 
ratio_with_curr_parent* ratio_of_curr_parent_with_root

In the end when finding answers, if they belong to same group, then find gives us the ratio of a with root, and ratio of b with root.
Now division is nothing but a/parent divided by b/parent.

class UnionFind:
  def __init__(self):
    self.node_vs_group_ratio = {}
    
  def find(self, variable):
    #initialize if not already present
    if variable not in self.node_vs_group_ratio:
      self.node_vs_group_ratio[variable] = (variable, 1)
     
    #path compression
    group_id, ratio_with_parent = self.node_vs_group_ratio[variable]
    if variable != group_id:
      actual_group_id, ratio_of_parent_with_actual_parent = self.find(group_id)
      self.node_vs_group_ratio[variable] = (actual_group_id, ratio_with_parent*ratio_of_parent_with_actual_parent)
      
    return self.node_vs_group_ratio[variable]

  def union(self, dividend, divisor, quotient):
    p1, ratio_dividend = self.find(dividend)
    p2, ratio_divisor = self.find(divisor)
    
    if p1 == p2:
      return
    
    #quotient = div/divisor
    #ratio1 = dividend/p1
    #ratio2 = divisor/p2
    #p1 = dividend/r1, p2 = divisor/r2
    #p1/p2 = dividend*r2/(divisor *r1) = (quotient*r2)/r1
    self.node_vs_group_ratio[p1] = (p2, (quotient*ratio_divisor)/ratio_dividend)
    
    
  def get_quotient(self, dividend, divisor):
    parent1, ratio_with_parent1 = self.find(dividend)
    parent2, ratio_with_parent2 = self.find(divisor)
    
    if parent1 != parent2:
      return -1
    else:
      return ratio_with_parent1/ratio_with_parent2
    

class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        
      uf = UnionFind()
        
      for idx, (dividend, divisor) in enumerate(equations):
        quotient = values[idx]
        uf.union(dividend, divisor, quotient)
        
      answers = []
      for dividend, divisor in queries:
        if dividend not in uf.node_vs_group_ratio or divisor not in uf.node_vs_group_ratio:
          answers.append(-1)
        else:
          answers.append(uf.get_quotient(dividend, divisor))
          
      return answers
      
      
      
      
ATtempt 2:
Ans. One thing we can deduce from here is that we can only calculate results for 2 nodes only if they are connected. If they are not, then we can not deduce the ans to node1/node2.

suppose we are given  "a"/"b" = 2, b/c = 3, d/c=4, then we can deduce that b/a = 0.5 and c/b = ⅓, c/d= 1/4
now a/d can be found by (a/b)*(b/c)*(c/d) ie 2*3*(¼) = 1.5

This can be thought of as a directed graph, and if a path exists between two nodes, then there is an answer. ANd the edge weight between two nodes is the actual ans of node1/ node2.

So, in brute force, we can represent the graph as a adjacency list like

a -> (b, 2)
b-> (a,0.5), (c, 3)
c -> (b, 1/3), (d, ¼)
d -> (c,4)
so a/d will be a->b->c->d ie 2*3*¼

so the TC for this will be equations * O(V+E)
Since equations are 20, max vertices can be 40, max edges can be (no of equations*2).

so v+e will be max (2E + 2E) ~ 4E ~O(E)

each query will be costing us O(E) time.

Approach 2:
If we observe more closely, then we find one of the problems is that is there a way to reach from a to b, which also means that do a and b belong to the same connected component.

The next thing is if they do, what is the ans of a/b.

We can use union find to find out if they belong to same component in effectively O(1) time using union find.
In union find, we store the value of parent for each of the nodes.
In addition to storing the parent or each nodes, we can also store its relationship with the parent by storing value of node/parent in every node's values array.

Eg union(a,b) where a/b = 2
Now parent(a) = b
value(a) = a relative to b ie a = 2b
so store ratio of a is to b.
value(b) = 1

Then union c to d which is ¼.
parent(c) = d
value(c) = c/d = ¼, value of d = 1

Now if we union b and c (3),
b's parent is now d and b/d will be 
value(b/c)*(value(c/d))
b/c = 3,
r1 = b/parent1 = 1
r2 = c/parent2 = ¼
now parent1/parent2 = (b/r1) / (c/r2) = quotient*(r2/r1)
so b's value is b/d which is 3*¼ = ¾

b/d = ¾
parent of a is still b and val is 2
now when we find a, its parent should be d now, when we change its parent value, we also change its ratio value which is nothing but a/b*b/d ie a/d ie (2*3)/4 = 3/2 = 1.5
so a = 1.5d

now whenever we want to find a/b we already have a/d and b/d
so ans is simply find(a)/find(b)

TC: to create union find - O(equations) ie no of union operations
for each query, it will be a O(1) operation as compared to a O(n) operation in dfs.

a   b   c   d   e   f
b   b        e   e  e

e/f = 2
a/f = 3


a 's parent will now be e

class UnionFind:
    def __init__(self, equations):
        self.var_idx_mapping = {}
        idx = 0
        #{"a": 0, "b": 1, "c": 2}
        #parents = [2,2,2], ratio_to_parents = [6,3,1]
        for var1, var2 in equations:
            if var1 not in self.var_idx_mapping:
                self.var_idx_mapping[var1] = idx
                idx += 1
            if var2 not in self.var_idx_mapping:
                self.var_idx_mapping[var2] = idx
                idx += 1
        
        total_nodes = len(self.var_idx_mapping)
        self.parents = [idx for idx in range(total_nodes)]
        self.ratio_to_parent = [1 for idx in range(total_nodes)]
  

    def find(self, idx):
        #parent, ratio_with_parent = self.parents[idx], self.ratio_to_parent[idx]
        #do path compression
        if self.parents[idx] != idx:
            self.parents[idx], ratio_parent_with_group_parent = self.find(self.parents[idx])
            self.ratio_to_parent[idx] = self.ratio_to_parent[idx] * ratio_parent_with_group_parent

        return self.parents[idx], self.ratio_to_parent[idx] 

        
    def union(self, var1, var2, quotient):
        idx1, idx2 =  self.var_idx_mapping[var1], self.var_idx_mapping[var2]
        parent1, ratio_parent1 = self.find(idx1)
        parent2, ratio_parent2 = self.find(idx2)

        if parent1 != parent2:
          self.parents[parent1] = parent2
          self.ratio_to_parent[parent1] = quotient * (ratio_parent2/ratio_parent1)

    def evaluate_division(self, dividend, divisor):
        if divisor not in self.var_idx_mapping or dividend not in self.var_idx_mapping:
          return -1

        idx1, idx2 =  self.var_idx_mapping[dividend], self.var_idx_mapping[divisor]
        #2,6.  
        parent1, ratio_parent1 = self.find(idx1)
        parent2, ratio_parent2 = self.find(idx2)
        if parent1 != parent2:
          return -1
        else:
          return ratio_parent1/ratio_parent2
        

class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
    
      #[["a","b"],["b","c"]]
      #[2.0,3.0], 
      #queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
      uf = UnionFind(equations)
      for idx, (var1, var2) in enumerate(equations):
        value = values[idx]
        uf.union(var1, var2, value)
        
      results = []
      for q_dividend, q_divisor in queries:
        results.append(uf.evaluate_division(q_dividend, q_divisor))
      return results

           
        
