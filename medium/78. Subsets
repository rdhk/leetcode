#1
#Backtracking solution
#append the start idx num in the result, and there are two options for each, to include or not include the number at current idx
#by appending we include the current num in currently formed sequence, by pop we exclude the current no in currently formed sequence
#[] -> [1](1 included) -> [1,2] (2 included) -> [1,2,3] (3 included) -> [1,2, 3, 4](4 included) -> [1,2,3](not used but 4 excluded and no more nums left) ->
[1,2](3 also excluded) -> [1,2,4] -> 4 included, [1,2] - no more seq, -> [1](2 excluded) -> [1,3](3 included in [1]), [1,3,4] (4 included), [1,3], -> [1] -> [1,4] ->
[1] -> [] -> [2], -> [2,3] -> [2,3,4] -> [2, 4] -> [3] -> [3,4] -> [4]
#So logic is to just include curr num once and find the remaining seq, then exclude the curr num and find the remaining seq.

#Time Complexity -> O(2^n * n) because backtrack called 2^n times, and there are O(n) copy operations for each
#Space Complexuty -> O(2^n * n) - results list

class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
      results = []
      curr_res = []
      length = len(nums)
      
      def backtrack(start):
        nonlocal results
        results.append(curr_res[::])
        
        for i in range(start, length):
          curr_res.append(nums[i])
          backtrack(i+1)
          curr_res.pop()
      
      backtrack(0)
      return results
      

#2
#Bit Manipulation
#find all nos between 0 and (2^n - 1) and set nos in result acc to the bits set in curr loop no
#Time and Space Complexity -> O(2^n * n)
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
      results = []
      length = len(nums)
      total_subsets = 2**length
      for n in range(total_subsets):
        curr_result = []
        for i in range(length):
          if n & (1 << i):
            curr_result.append(nums[i])
        results.append(curr_result)
      return  results
      
      
