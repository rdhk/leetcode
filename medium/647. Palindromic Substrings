# Brute Force:
# Find all substrings and see which of them are palindromic.
# TC: find all 1 length, then 2 length..n length
# for each, find if they are palindromic
# n + 2(n-1) + 3(n-2) + n/2(n/2)
# => n[1 + 2 + ...n]
# => ncube
# SC: O(1)

# "cbbd"
# cbbd
# We can used already computed results to get if a substring is palindromic or not

# All 1 length are palindromic
# All 2 lengths will be palindromic if both have same
# All 3 lengths instead of checking again, we need to check if left and right are same and inside one is already palindromic

# This will be a n sq solution

class Solution:
  def countSubstrings(self, s: str) -> int:
    if not s: return 0
    if len(set(s)) == len(s): return len(s)
    #1d cache
    prev = [False]*len(s)
    curr = [False]*len(s)
     #  cbbb
     # cTFFF
     # b TTT
     # b  TT
     # dFFFT 
      
    #"aaa"
   #  aaa
   # aTTT
   # a TT
   # a  T
    count = 0
    for start in range(len(s) - 1, -1, -1):
      for end in range(start, len(s)):
        if start == end:
          curr[end] = True
        elif s[start] == s[end] and ((start == end - 1) or (prev[end-1] is True)):
          curr[end] = True
        else:
          curr[end] = False
        count += int(curr[end])
      prev, curr = curr, prev
    return count 
    
Expand Around Centre Solution:
O(nsq), O(1) space

class Solution:
  def find_max_around(self, s, l, r):
    left_boundary, right_boundary = l, r
    count = 0

    while(l >= 0 and r < len(s) and s[l] == s[r]):
      count += 1
      l -= 1
      r += 1
    return count

  def countSubstrings(self, s: str) -> str:
      if not s: return ""
      # if len(s) == len(set(s)): return len(s)
      length = len(s)
      count = 0
      for i in range(length):
        count1 = self.find_max_around(s, i, i)
        count2 = 0
        if i != length - 1:
          count2 = self.find_max_around(s, i, i+1)

        count += (count1 + count2)
      return count
