#startting from room 0, if we are able to visit all the rooms somehow, then we return true
#we can do a dfs starting from 0, adding in stack its keys if those rooms are not already visited
#if at any point we visit all the rooms, we return true
#otherwise if stack becomes empty, we return false


'''
if we do a bfs from starting room, it would also be able to give us all the nodes reachable from starting room, if at any point we have visited all of them, then we can return true

[[1,4],[2,4],[],[],[3]]
0-> 1,4 -> 2,3
'''
class Solution:
    def canVisitAllRoomsdfs(self, rooms: List[List[int]]) -> bool:
        stack = [0]
        visited = set() #0,1,3
        visited.add(0)
        
        
        while(stack and len(visited) < len(rooms)):
          curr_room = stack.pop()
          for unlock_room in rooms[curr_room]:
            if unlock_room not in visited:
              visited.add(unlock_room)
              stack.append(unlock_room)
              
        return len(visited) == len(rooms)
      
    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
      
      if not rooms: return True
      queue = collections.deque([0])
      visited = {0}
      
      while(queue and len(visited) != len(rooms)):
        curr_room = queue.popleft()
        for next_room in rooms[curr_room]:
          if next_room not in visited:
            visited.add(next_room)
            queue.append(next_room)
          
          if len(visited) == len(rooms):
            break
        
      return len(visited) == len(rooms)
        
        
