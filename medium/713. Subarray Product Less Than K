Approach 1 
from brute force(n cube) to O(n) sliding window
class Solution:
    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:
        #brute force way to find all subarrays of length 1, 2 ..n
        #for each i, find subarrays of length 1, 2, ..n
        
        #10, 5, 2, 6
        #10,5 5,2 2,6
        #10,5,2
        #this is n^3 method
        
#         A better method is to start at i=0,1,2..n-1, and keep expanding until product is valid,
#         so by end of one iteration starting at i, we get max no of valid subarrays starting at that i
#         This is a n^2 method
        
#         If we notice, then we are recalculating the product when we are doing a new iteration from say i=1
#         We can simply divide by the leftmost element in valid product subarray,
#         and product would be still valid as it would be lesser than before
#         And then we try to expand the window to see max how many subarrays starting at i have valid products.
        
#         whenever we contract a valid window, we keep adding the last valid idx - curr start + 1
        
#         in the end, keep adding all i's if window product is valid, otherwise not

        #2000, 200, 20, 6, 10 -> 
  
        #[10, 5, 2, 6]
        curr_window_product = 1 #60
        left = 0 #left=1, right = 2
        result = 0 #2
        for right, num in enumerate(nums):
          curr_window_product *= num
          
          #invalid window, add all windows on left if applicable
          if curr_window_product >= k:
            #until left <= right and the window product is still invalid, but it was valid until r - 1
            while(left <= right and curr_window_product >= k):
              if (right - left > 0):
                result += (right - left)
                
              curr_window_product /= nums[left]
              left += 1
              
        if curr_window_product < k:
            rem_nums =  (len(nums) - left)
            result += ((rem_nums*(rem_nums + 1))//2)
            
        return result

Approach 2
class Solution:
    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:
      #another way to look at it is how many subarray ending at current right
      
      #r = 10, ans += 1
      #r=5, ans += 2
      #r=2, ans+= 1
      #r=6, ans += 3
      
      #200,100,50,1
      
      #0,1,3,5
      
      
      left = 0
      curr_window_prod = 1
      ans = 0
      for right, num in enumerate(nums):
        curr_window_prod *= num
        
        while(left <= right and curr_window_prod >= k):
          curr_window_prod/= nums[left]
          left += 1
          
        #no of valid subarrays ending at current right
        if left <= right:
          ans += (right - left + 1)
          
      return ans
