Top down DP O(n2) time and space
'''
Here for a string to be a palin substr, the s and end must be same plus the inside string should also be a palin substr
Either we can return the length of the palin substr from inside and see if its length == inner substr, if yes, then ans is also a palin substr + 2
First we'll try the top down approach, and return the length of max substr in inner,
if at a state both letters are same and also inner is a palindrome, then it means current is also a palindrome

'''

class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s: return ""
        max_palin_length = 0
        left_idx, right_idx = None, None
        
        def top_down_longest_palin(start, end):
          #empty str base case
          nonlocal max_palin_length, left_idx, right_idx, cache
          if start > end:
            return True
          
          if cache[start][end] == -1:
            cache[start][end] = False
            #base case
            if start == end:
              if max_palin_length < 1:
                max_palin_length = max(max_palin_length, 1)
                left_idx, right_idx = start, end
              cache[start][end] = True

            #curr str is a palin
            elif s[start] == s[end] and top_down_longest_palin(start + 1, end - 1):
              if max_palin_length < (end - start + 1):
                max_palin_length = max(max_palin_length, (end - start + 1))
                left_idx, right_idx = start, end
              cache[start][end] = True
              
            else:
              top_down_longest_palin(start + 1, end)
              top_down_longest_palin(start, end - 1)
            
          return cache[start][end]
          
        cache = [[-1]*len(s) for i in range(len(s))]
        top_down_longest_palin(0, len(s) - 1)
        return s[left_idx:right_idx+1]
        


#  cbbd
# c
# bFTT
# bFFTF  
# dFFFT 

Bottom up Dp nsq space
'''
Here for a string to be a palin substr, the s and end must be same plus the inside string should also be a palin substr
Either we can return the length of the palin substr from inside and see if its length == inner substr, if yes, then ans is also a palin substr + 2
First we'll try the top down approach, and return the length of max substr in inner,
if at a state both letters are same and also inner is a palindrome, then it means current is also a palindrome

'''

class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s: return ""
        max_palin_length = 0
        left_idx, right_idx = None, None
        length = len(s)
        cache = [[False]*length for i in range(length)]
        
        for start in range(length - 1, -1, -1):
          for end in range(start, length):
            if start == end or (s[start] == s[end] and (end == start + 1 or cache[start + 1][end - 1])):
              cache[start][end] = True
              
              if end - start + 1 > max_palin_length:
                max_palin_length = end - start + 1
                left_idx, right_idx = start, end
              
        
        return s[left_idx:right_idx+1]
        


Bottom Up Dp O(2n) space
'''
Here for a string to be a palin substr, the s and end must be same plus the inside string should also be a palin substr
Either we can return the length of the palin substr from inside and see if its length == inner substr, if yes, then ans is also a palin substr + 2
First we'll try the top down approach, and return the length of max substr in inner,
if at a state both letters are same and also inner is a palindrome, then it means current is also a palindrome

'''

class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s: return ""
        max_palin_length = 0
        left_idx, right_idx = None, None
        length = len(s)
        prev = [False]*length
        curr = [False]*length
        
        # prev = [F,F,F,F,T]
        # curr = [F,F,F,T,F]
        for start in range(length - 1, -1, -1):
          for end in range(start, length):
            if start == end or (s[start] == s[end] and ((end == start + 1) or prev[end - 1])):
              
              curr[end] = True
              curr_length = end - start + 1
              if curr_length > max_palin_length:
                # print(start, end, s[start], s[end], end - start + 1, s[start:end+1])
                max_palin_length = curr_length
                left_idx, right_idx = start, end
            else:
              curr[end] = False
              
                
          # print(prev, curr, max_palin_length)
          prev, curr = curr, prev 
        
        return s[left_idx:right_idx+1]
        
 Approach 4: expand around centre
 A palin can be like abcba(odd) or it can be like abccba(even)
  if for each letter, we try to find the max palindromic substring around it , we can get the max among all.
  
 for even strings, l + 1 == r, for odd strings, l == r
 so we need to check for each letter, finding no of odd strings by passing l and r as same and no of even strs, by passing l and r as l, l+1
 There are n letters, so n odd strings possible, and n-1 lefts, from 0 to n-2, so, n-1 even strs possible
 so total times we'll be checking is n + n - 1 = 2n - 1
 and each check takes n time
 so TC is nsq and SC is O(1)
 
 class Solution:
    def find_max_around(self, s, l, r):
      max_len = 0
      left_boundary, right_boundary = l, r
      
      while(l >= 0 and r < len(s) and s[l] == s[r]):
        if l == r:
          max_len += 1
        else:
          max_len += 2
        l -= 1
        r += 1
      return max_len, l+1, r-1
    
    def longestPalindrome(self, s: str) -> str:
        if not s: return ""
        max_palin_length = 0
        left_idx, right_idx = None, None
        length = len(s)
        
        for i in range(length):
          curr_max_len_1, l1, r1 = self.find_max_around(s, i, i)
          curr_max_len_2 = 0
          if i != length - 1:
            curr_max_len_2, l2, r2 = self.find_max_around(s, i, i+1)
          
          if max(curr_max_len_1, curr_max_len_2) > max_palin_length:
            curr_max, l , r = (curr_max_len_1, l1, r1) if curr_max_len_1 >= curr_max_len_2 else (curr_max_len_2, l2, r2)
            
            max_palin_length = curr_max
            left_idx, right_idx = l, r
        return s[left_idx: right_idx+1]    
       
