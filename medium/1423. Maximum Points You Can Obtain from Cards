#Approach 1
Since the k elements will always be on the boundary, ie no of elements picked from left and right's sum will always be k,
thus the subarrays in between of length (n-k) will not be in the result.
To maximise the sum of k elements, we can minimise the sum of (n-k) remaining elements in our array by sliding a window of size (n-k) , and finding the smallest sum,
and then taking its diff from the total sum of the array.

TC: O(n) because we'll need to go through all elements in (n-k+1) windows
SC: O(1)

# u can minimise the sum of n-k windows in the in the whole array - O(n) - time and O(1) space

class Solution(object):
      
      
    def maxScore(self, cardPoints, k):
        """
        :type cardPoints: List[int]
        :type k: int
        :rtype: int
        """
        
        #find min window of size (n-k)
        if k == len(cardPoints):
          return sum(cardPoints)
        
        sliding_window_size = len(cardPoints) - k
        
        window_sum = 0
        for i in range(sliding_window_size):
          window_sum += cardPoints[i]
        
        min_window_sum = window_sum
        
        for i in range(sliding_window_size, len(cardPoints)):
          window_sum -= cardPoints[i-sliding_window_size]
          window_sum += cardPoints[i]
          min_window_sum = min(window_sum, min_window_sum)
        
        return sum(cardPoints) - min_window_sum
        
        
        
# keep a cumulative sum from left and right
#find max of all sums ranging from 0 to k elements from left and k to 0 sums from right
#O(k) time and O(k) space 
#0  1, 3, 6
#12, 7,1, 0

# Possible windows to include are from left k=0 and right=k to left k=k and right = 0


#Approach 2: Since k <= L , and we just need either first k to max last k elements in our result sum, we can slide window between first and last k elements,
and recording their max sum. 
First take window of first k elements
Then keep reducing the righmost element in left window and keep adding the leftmost right element not included from the end.
Do this k times, until we include all last k elements and 0 first elements.
The max sum of all these would be the ans

TC: O(2k)
SC: O(1)

class Solution(object):
      
      
    def maxScore(self, cardPoints, k):
        """
        :type cardPoints: List[int]
        :type k: int
        :rtype: int
        """

        if k == len(cardPoints):
          return sum(cardPoints)
  
        curr_window_sum = 0
        
        for i in range(k):
          curr_window_sum += cardPoints[i]
        
        max_sum = curr_window_sum
        
        #keep decreasing one from left window and keep adding one from right window from k=1 to k=k
        left = k-1
        right = len(cardPoints) - 1
        
        for i in range(k):
          curr_window_sum = curr_window_sum - cardPoints[left] + cardPoints[right]
          left -= 1
          right -= 1
          
          max_sum = max(max_sum, curr_window_sum)
          
        return max_sum
