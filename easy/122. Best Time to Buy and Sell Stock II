#MEthod 1 -> Peak and valley -> Find all peaks and valleys -> and add the sums obtained from each peak valley diff -> we should not skip a peak for a bigger peak
Eg v1 = 3, p1 = 10, v2 = 9, p2 = 11
P = 7 + 2 as opposed to 8 if we missed selling at p1 () 
![image](https://user-images.githubusercontent.com/8983984/88948768-f46b3d80-d2af-11ea-9b0a-483c088f7a01.png)

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
      if not prices: return 0
      length = len(prices)
      last_valley = prices[0]
      max_profit = 0
      
      for i in range(1,length):
        if prices[i] >= prices[i-1]:
          continue
        else:
          max_profit += (prices[i-1] - last_valley)
          last_valley = prices[i]
      
      max_profit += (prices[length-1] - last_valley)
      return max_profit
       
#Easier refactored, only add when diff is positive between prev and curr prices because the profit will keep adding until the price increases,
and the moment price drops, we'll sell it, and not buy until it starts increasing again, so profit added will be zero intil it decreases.
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
      if not prices: return 0
      length = len(prices)
      max_profit = 0
      
      for i in range(1,length):
        price_diff = prices[i] - prices[i-1]
        max_profit += (price_diff if price_diff >= 0 else 0) 
      return max_profit
    
          
