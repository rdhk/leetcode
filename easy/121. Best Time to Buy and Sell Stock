#n^2 -> Brute Force
for every left elements, search for a max element on right, and keep track of max profit

Method 2: D&C
#O(n) time and O(n) space Divide and conquer
# The problem statement can be reduced to find the max profit (ie max) diff of i and j such that, i < j and A[i] < A[j](ie max of min element on left and max ele on right).
#Divide, Conquer, Combine
#So, keep dividing until we obtain single length list, and return (max profit, min, max) from here
#While merging/comibining the results, max profit = max(left and right profits, max on right - min on left profit)
#return (max profit, min of both left and right, max of both left and right)

T(n) = 2T(n/2) + O(1)
n^1 = n

class Profit:
  def __init__(self, max_profit, min, max):
    self.max_profit = max_profit
    self.min = min
    self.max = max

class Solution:
    def max_profit_dc(self, prices, left, right):
      if left == right:
        return Profit(0, prices[left], prices[right])
      
      mid = left + ((right - left) >> 1)
      
      left_profit = self.max_profit_dc(prices, left, mid)
      right_profit = self.max_profit_dc(prices, mid+1, right)
      
      maxp_among_both = max(left_profit.max_profit, right_profit.max_profit, 
                           right_profit.max - left_profit.min)
      return Profit(maxp_among_both, min(left_profit.min, right_profit.min),
                   max(left_profit.max, right_profit.max))
      
      
    def maxProfit(self, prices: List[int]) -> int:
      if not prices: return 0
      max_p = self.max_profit_dc(prices, 0, len(prices) - 1)
      return max_p.max_profit
      
Method 3:
Keep mins from left to right
Keep max's from right to left
Compare each and return max_difference(Idea similar to above approach)
TC: O(n), SC: O(n)
class Solution:
      
      
    def maxProfit(self, prices: List[int]) -> int:
      if not prices: return 0
      length = len(prices)
      max_profit = 0
      mins_from_l, max_from_r = ['*']*length, ['*']*length
      
      mins_from_l[0] = prices[0]
      max_from_r[length - 1] = prices[length - 1]
      for i in range(1, length):
        mins_from_l[i] = min(mins_from_l[i-1], prices[i])
        max_from_r[length - 1 - i] = max(max_from_r[length - i], prices[length -1-i])
      
      for i in range(length):
        max_profit = max(max_profit, max_from_r[i] - mins_from_l[i])
      return max_profit
      
Method 4: Peaks and Valleys
TC: O(n) and SC: O(1)
Keep updating the max profit to curr - min if price > min until now, else update min if price < min until now
A bit similar to kadane's where its like resetting min(or resetting curr profit to 0) when a lower element found, otherwise, keep updating max if (curr - min) > max  

class Solution:
      
    def maxProfit(self, prices: List[int]) -> int:
      min_price = float(inf)
      max_profit = 0
      
      for price in prices:
        #similar to kadane's negative condition
        if price < min_price:
          min_price = price
        else:
          max_profit = max(max_profit, price - min_price)
      return max_profit
      
 MEthod 5: KADANE's Algotrithm
 TC: O(n) and SC: O(1)
 
 This can be looked like an array of differences between consecutive day stock prices. If any day the stock price is lesser then what we bought at(min_until_now changes), we would 
 rather buy it at that price rather than making our profit negative).
 
 if prices are p1,p2,p3,p4,p5 we want to find pa and pb such that pa < pb and a < b and the difference between them is max.
 Now, pa - pb, if they are eg p2 and p5, can be written as,
 (p3 - p2) + (p4-p3) + (p5 - p4) = (p5 - p2)
 so we should find max subarray sum
 
 
 class Solution:
      
      
    def maxProfit(self, prices: List[int]) -> int:
      profit_curr = 0
      for i in range(1, len(prices)):
        price_diff = (prices[i] - prices[i-1])
        #whenever we encounter some number < curr_min, this will become -ve
        if profit_curr + price_diff < 0:
          profit_curr = 0
        else:
          profit_curr += price_diff
        max_profit = max(max_profit, profit_curr)
      return max_profit
