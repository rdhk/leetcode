My approach: 
O(n) add, O(1) find ans O(n2) space - TLE

'''
Brute Force:
  Keep storing all elements, when a value is queried, 
  loop through each in nsq time and find if two this sum.
  n sq - very large
  
  if we keep it sorted somehow(maybe a balanced bst?) =O(logn insertion)
  when we have a find()
  for each value, find its complement in logn time - nlogn time find
  
  if we insert in sorted list -. O(n) insertion, but we can reduce our find time to O(n)
  if we maintain a list of all nos until now, with their freq, we can say we add a num to that hashmap and calc all possible sums from those nos present. - O(n) operation
  
  this will make our find operation O(1) but our space complexity - O(n2) all elements can be summed with all elements
  
  #we'll need to handle duplicates, if one is already there, then we need to add its double to the sums set
[[], [1], [3], [5], [4], [7]]
set_nums: {1, 3, 5}
  if num is already there, just add the double, no need to add all the sums as they are already present
set_sums = {4, 6, 8, 10}
O(n unique nums) add, O(1) find
O(n2 space)
'''
class TwoSum:
#["TwoSum", "add", "add", "add", "find", "find"]
# [[], [1], [3], [5], [4], [7]]

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.nums = set() #{1,3,5}
        self.sums = set() #{4,6,8,10}
      
    def add(self, number: int) -> None:
        """
        Add the number to an internal data structure..
        """
        
        if number in self.nums:
          self.sums.add(2*number)
        else:
          for num2 in self.nums:
            self.sums.add(num2 + number)
            
          self.nums.add(number)
        

    def find(self, value: int) -> bool:
        """
        Find if there exists any pair of numbers which sum is equal to the value.
        """
        return value in self.sums
        


# Your TwoSum object will be instantiated and called as such:
# obj = TwoSum()
# obj.add(number)
# param_2 = obj.find(value)


Approach2: Leetcode, 
add - O(1), find- max nlogn + n, keep a list of all nums, and sort them on demand, and keep two pointers to find if req sum exists.
'''
Brute Force:
  Keep storing all elements, when a value is queried, 
  loop through each in nsq time and find if two this sum.
  n sq - very large
  
  if we keep it sorted somehow(maybe a balanced bst?) =O(logn insertion)
  when we have a find()
  for each value, find its complement in logn time - nlogn time find
  
  if we insert in sorted list -. O(n) insertion, but we can reduce our find time to O(n)
  if we maintain a list of all nos until now, with their freq, we can say we add a num to that hashmap and calc all possible sums from those nos present. - O(n) operation
  
  this will make our find operation O(1) but our space complexity - O(n2) all elements can be summed with all elements
  
  #we'll need to handle duplicates, if one is already there, then we need to add its double to the sums set
[[], [1], [3], [5], [4], [7]]
set_nums: {1, 3, 5}
  if num is already there, just add the double, no need to add all the sums as they are already present
set_sums = {4, 6, 8, 10}
O(n unique nums) add, O(1) find
O(n2 space)

To make add O(1) and find O(n) , we can just maintain a hashmap of nos, and on find, loop through the nos and find if its complement in hash, handle sum = double of a num case by comparing frequencies
Space expended would be O(n) as compared to O(n2) in previous case., and time is linear for find but constant for add.
'''
class TwoSum:
#["TwoSum", "add", "add", "add", "find", "find"]
# [[], [1], [3], [5], [4], [7]]

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.nums = []
        self.sorted = False
      
    def add(self, number: int) -> None:
        """
        Add the number to an internal data structure..
        """

        self.nums.append(number)
        self.sorted = False
        

    def find(self, value: int) -> bool:
        """
        Find if there exists any pair of numbers which sum is equal to the value.
        """
        
        if self.sorted is False:
          self.nums.sort()
          self.sorted = True
          
        l, r = 0, len(self.nums) - 1
        
        while(l < r):
          curr_sum = self.nums[l] + self.nums[r]
          if curr_sum == value:
            return True
          elif curr_sum < value:
            l += 1
          else:
            r -= 1
            
        return False
            
        


# Your TwoSum object will be instantiated and called as such:
# obj = TwoSum()
# obj.add(number)
# param_2 = obj.find(value)


Apprach 3: Keep a hash of all nums, add - O(1), find- O(n), handle duplicate values

'''
Brute Force:
  Keep storing all elements, when a value is queried, 
  loop through each in nsq time and find if two this sum.
  n sq - very large
  
  if we keep it sorted somehow(maybe a balanced bst?) =O(logn insertion)
  when we have a find()
  for each value, find its complement in logn time - nlogn time find
  
  if we insert in sorted list -. O(n) insertion, but we can reduce our find time to O(n)
  if we maintain a list of all nos until now, with their freq, we can say we add a num to that hashmap and calc all possible sums from those nos present. - O(n) operation
  
  this will make our find operation O(1) but our space complexity - O(n2) all elements can be summed with all elements
  
  #we'll need to handle duplicates, if one is already there, then we need to add its double to the sums set
[[], [1], [3], [5], [4], [7]]
set_nums: {1, 3, 5}
  if num is already there, just add the double, no need to add all the sums as they are already present
set_sums = {4, 6, 8, 10}
O(n unique nums) add, O(1) find
O(n2 space)

To make add O(1) and find O(n) , we can just maintain a hashmap of nos, and on find, loop through the nos and find if its complement in hash, handle sum = double of a num case by comparing frequencies
Space expended would be O(n) as compared to O(n2) in previous case., and time is linear for find but constant for add.
'''
class TwoSum:
#["TwoSum", "add", "add", "add", "find", "find"]
# [[], [1], [3], [5], [4], [7]]

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.nums = collections.defaultdict(int)
      
    def add(self, number: int) -> None:
        """
        Add the number to an internal data structure..
        """

        self.nums[number] += 1
        

    def find(self, value: int) -> bool:
        """
        Find if there exists any pair of numbers which sum is equal to the value.
        """
        
        for num in self.nums:
          complement = value - num
          if (complement == num and self.nums[num] > 1) or (complement != num and complement in self.nums):
            return True
        return False
        


# Your TwoSum object will be instantiated and called as such:
# obj = TwoSum()
# obj.add(number)
# param_2 = obj.find(value)
