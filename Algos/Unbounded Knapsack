Given a rod of length ‘n’, we are asked to cut the rod and sell the pieces in a way that will maximize the profit. We are also given the price of every piece of length ‘i’ where ‘1 <= i <= n’.
Example:
Lengths: [1, 2, 3, 4, 5]
Prices: [2, 6, 7, 10, 13]
Rod Length: 5

Lengths: [1, 2, 3, 4, 5]  
Prices: [2, 6, 7, 10, 13]  
Rod Length: 5

BRUTE FORCE:

def max_profit_brute_force(lengths, prices, rod_length):

	def max_profit_recursive(rem_length):
		if rem_length <= 0:
			return 0
		
		max_profit = 0
		for idx, length in enumerate(lengths):
			if length <= rem_length:
				max_profit = max(max_profit, prices[idx] + max_profit_recursive(rem_length - length))
		
		return max_profit

	return max_profit_recursive(rod_length)
  
  TOP DOWN DP:
  TC: rod_len*pieces_length
  def max_profit_td_dp(lengths, prices, rod_length):
    max_profit_cache = [-1]*(rod_length + 1)

    def max_profit_recursive(rem_length):
        nonlocal max_profit_cache
        if rem_length <= 0:
          return 0

        if max_profit_cache[rem_length] == -1:
          max_profit = 0
          for idx, length in enumerate(lengths):
            if length <= rem_length:
              max_profit = max(max_profit, prices[idx] + max_profit_recursive(rem_length - length))

          max_profit_cache[rem_length] = max_profit

        return max_profit_cache[rem_length]


    return max_profit_recursive(rod_length)
  
  Bottom up Dp:
  #TC
  def max_profit_bottom_up_dp(lengths, prices, rod_length):
    max_profit_cache = [0]*(rod_length + 1)

    for rod_len in range(1, rod_length + 1):
      max_profit = 0
      for idx, length in enumerate(lengths):
        if length <= rod_len:
          max_profit = max(max_profit, prices[idx] + max_profit_cache[rod_len - length])
      max_profit_cache[rod_len] = max_profit
    return max_profit_cache[rod_length]
    
Add max_len contributing to profit at each rod_len while calc the max_profit. and then backtrack and find the length contributing to the max_profit.
    
14
0:00:00.000227 - brute force
14
0:00:00.000078 - top down
14
0:00:00.000064 - bottom up

COIN CHANGE

BRUTE FORCE

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
      
      
      def coin_change_rec(amt_rem, idx_start):
        if amt_rem == 0: 
          return 1
        
        if idx_start >= len(coins) or amt_rem < 0:
          return 0

        
        total_ways = 0
        for coin_idx in range(idx_start, len(coins)):
          total_ways += coin_change_rec(amt_rem - coins[coin_idx], coin_idx)
          
        return total_ways
      

      return coin_change_rec(amount, 0)
      
  OR
  class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
      
      def possible_ways_rec(rem_amount, start_idx):
        
        if rem_amount == 0:
          return 1
        
        if start_idx >= len(coins) or rem_amount < 0: 
          return 0
        
        ways_excluding = possible_ways_rec(rem_amount, start_idx + 1)
        
        ways_including = 0
        if coins[start_idx] <= rem_amount:
          ways_including = possible_ways_rec(rem_amount - coins[start_idx], start_idx)
          
        return ways_including + ways_excluding
      
      return possible_ways_rec(amount, 0)
        
	
TOP DOWN
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
      
      def possible_ways_rec(rem_amount, start_idx):
        nonlocal cache
        if rem_amount == 0:
          return 1
        
        if start_idx >= len(coins) or rem_amount < 0: 
          return 0
        
        if cache[start_idx][rem_amount] == -1:
          
          ways_excluding = possible_ways_rec(rem_amount, start_idx + 1)

          ways_including = 0
          if coins[start_idx] <= rem_amount:
            ways_including = possible_ways_rec(rem_amount - coins[start_idx], start_idx)
          cache[start_idx][rem_amount] = ways_excluding + ways_including
          
        return cache[start_idx][rem_amount]
      
      cache = [[-1]*(amount +1) for idx in range(len(coins))]
      return possible_ways_rec(amount, 0)
      
 BOTTOM UP
 
 class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        
        
        
        cache = [[0]*(amount + 1) for i in range(len(coins) + 1)]
        
        cache[0][0] = 1
        
        for coin_idx in range(1, len(coins) + 1):
          for amt in range(amount + 1):
            
            cache[coin_idx][amt] += cache[coin_idx - 1][amt]
            if coins[coin_idx - 1] <= amt:
              cache[coin_idx][amt] += cache[coin_idx][amt - coins[coin_idx-1]]
              
        return cache[len(coins)][amount]
           
	   
BOTTOM UP SPACE OPTIMISED
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        
        
        
        cache = [[0]*(amount + 1) for i in range(len(coins) + 1)]
        
        prev = [0]*(amount + 1)
        curr = [0]*(amount + 1)
        prev[0] = 1
        
        for coin_idx in range(len(coins)):
          for amt in range(amount + 1):
            curr[amt] = prev[amt]
            if coins[coin_idx] <= amt:
              curr[amt] += curr[amt - coins[coin_idx]]
          prev, curr = curr, prev
              
        return prev[amount]
        
	
COIN CHANGE: MIN COINS TO MAKE CHANGE

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        
        def min_coins_recur(rem_amount):
          # print(rem_amount)
          if rem_amount == 0:
            return 0
          if rem_amount < 0:
            return float(inf)
          
          min_coins_req = float(inf)
          
          for coin in coins:
            min_coins_req = min(min_coins_req, min_coins_recur(rem_amount - coin))

            
          return 1 + min_coins_req
          
        min_coins = min_coins_recur(amount)
        return -1 if min_coins == float(inf) else min_coins
	
TOP DOWN

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        
        def min_coins_recur(rem_amount):
          # print(rem_amount)
          if rem_amount == 0:
            return 0
          if rem_amount < 0:
            return float(inf)
          
          if cache[rem_amount] == -1:
            
            min_coins_req = float(inf)

            for coin in coins:
              min_coins_req = min(min_coins_req, min_coins_recur(rem_amount - coin))
            cache[rem_amount] = 1 + min_coins_req
            
          return cache[rem_amount]
        
        cache = [-1]*(amount + 1)
        min_coins = min_coins_recur(amount)
        return -1 if min_coins == float(inf) else min_coins
	
	BOTTOM UP DP
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        
        cache = [0]*(amount + 1)
        
        for amt in range(1, amount + 1):
          min_coins_for_amt = float(inf)
          for coin in coins:
            if coin <= amt:
              min_coins_for_amt = min(min_coins_for_amt, cache[amt - coin])
          cache[amt] = 1 + min_coins_for_amt
            
        return -1 if cache[amount] == float(inf) else cache[amount]
	
BRUTE FORCE
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
      
      #Unbounded Knapsack
      def min_coins_recur(rem_amount, start_idx):
        
        if rem_amount == 0:
          return 0
        
        if rem_amount < 0 or start_idx >= len(coins):
          return float(inf)
        
        min_coins_excluding_curr = min_coins_recur(rem_amount, start_idx + 1)
        min_coins_including_curr = float(inf)
        
        if coins[start_idx] <= rem_amount:
          min_coins_including_curr = 1 + min_coins_recur(rem_amount - coins[start_idx], start_idx)
          
        return min(min_coins_including_curr, min_coins_excluding_curr)
      
      coins_min = min_coins_recur(amount, 0)
      return -1 if coins_min == float(inf) else coins_min 
      
 TOP DOWN:
 class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
      
      #Unbounded Knapsack
      def min_coins_recur(rem_amount, start_idx):
        nonlocal cache
        if rem_amount == 0:
          return 0
        
        if rem_amount < 0 or start_idx >= len(coins):
          return float(inf)
        
        if cache[start_idx][rem_amount] == -1:
          min_coins_excluding_curr = min_coins_recur(rem_amount, start_idx + 1)
          min_coins_including_curr = float(inf)

          if coins[start_idx] <= rem_amount:
            min_coins_including_curr = 1 + min_coins_recur(rem_amount - coins[start_idx], start_idx)
          cache[start_idx][rem_amount] = min(min_coins_including_curr, min_coins_excluding_curr)
        return cache[start_idx][rem_amount]
      
      cache = [[-1 for amt in range(amount + 1)] for start_idx in range(len(coins))]
      coins_min = min_coins_recur(amount, 0)
      return -1 if coins_min == float(inf) else coins_min
      
    
 
Maximum ribbon cut - (like min coin change)
We are given a ribbon of length ‘n’ and a set of possible ribbon lengths. Now we need to cut the ribbon into the maximum number of pieces that comply with the above-mentioned possible lengths. Write a method that will return the count of pieces.

Example 1:

n: 5
Ribbon Lengths: {2,3,5}
Output: 2
Explanation: Ribbon pieces will be {2,3}.
Example 2:

n: 7
Ribbon Lengths: {2,3}
Output: 3
Explanation: Ribbon pieces will be {2,2,3}.
Example 3:

n: 13
Ribbon Lengths: {3,5,7}
Output: 3
Explanation: Ribbon pieces will be {3,3,7}.

import datetime

def max_length_brute_force(length, ribbon_lengths):


  def max_len_recur(rem_length, start_idx):
    if rem_length == 0:
      return 0

    if start_idx == len(ribbon_lengths) or rem_length < 0:
      return float('-inf')

    excluding_current = max_len_recur(rem_length, start_idx + 1)
    including_current = float('-inf')
    if ribbon_lengths[start_idx] <= rem_length:
      including_current =  1 + max_len_recur(rem_length - ribbon_lengths[start_idx], start_idx)

    # print(rem_length, start_idx, excluding_current, including_current)
    return max(excluding_current, including_current)

  if not length or not ribbon_lengths:
    return 0

  return max_len_recur(length, 0)
  
def max_length_top_down(length, ribbon_lengths):


  def max_len_recur(rem_length, start_idx):
    nonlocal cache
    if rem_length == 0:
      return 0

    if start_idx == len(ribbon_lengths) or rem_length < 0:
      return float('-inf')

    if cache[start_idx][rem_length] == -1:

      excluding_current = max_len_recur(rem_length, start_idx + 1)
      including_current = float('-inf')
      if ribbon_lengths[start_idx] <= rem_length:
        including_current =  1 + max_len_recur(rem_length - ribbon_lengths[start_idx], start_idx)
      cache[start_idx][rem_length] = max(excluding_current, including_current)

    # print(rem_length, start_idx, excluding_current, including_current)
    return cache[start_idx][rem_length]

  cache = [[-1]*(length+1) for idx in range(len(ribbon_lengths))]
  if not length or not ribbon_lengths:
    return 0

  return max_len_recur(length, 0)


def max_length_bottom_up_dp(length, ribbon_lengths):

  cache = [float('-inf')]*(length + 1)
  #zero length can be made with 0 pieces
  #not possible to make length 1,2,3..etc with one or more pieces, so -inf
  cache[0] = 0
  #[0,-,-,1,-,-,-,-,-,-,-,-,-,-]
  3
  for ribbon_len in ribbon_lengths:
    for length_curr in range(length + 1):
      if ribbon_len <= length_curr:
        #prev is cache[length_curr] - ie if we dont use current piece
        cache[length_curr] = max(cache[length_curr], 1 + cache[length_curr - ribbon_len])
  return cache[length]

old_time = datetime.datetime.now()
print(max_length_brute_force(200 , [3,5,7]))

new_time = datetime.datetime.now()
print((new_time - old_time).total_seconds()*1000)
old_time = datetime.datetime.now()

print(max_length_top_down(200 , [3,5,7]))

new_time = datetime.datetime.now()
print((new_time - old_time).total_seconds()*1000)

old_time = datetime.datetime.now()

print(max_length_bottom_up_dp(200
 , [3,5,7]))

new_time = datetime.datetime.now()
print((new_time - old_time).total_seconds()*1000)

66
162.378
66
7.518000000000001
66
4.809

