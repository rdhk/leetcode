Given a rod of length ‘n’, we are asked to cut the rod and sell the pieces in a way that will maximize the profit. We are also given the price of every piece of length ‘i’ where ‘1 <= i <= n’.
Example:
Lengths: [1, 2, 3, 4, 5]
Prices: [2, 6, 7, 10, 13]
Rod Length: 5

Lengths: [1, 2, 3, 4, 5]  
Prices: [2, 6, 7, 10, 13]  
Rod Length: 5

BRUTE FORCE:

def max_profit_brute_force(lengths, prices, rod_length):

	def max_profit_recursive(rem_length):
		if rem_length <= 0:
			return 0
		
		max_profit = 0
		for idx, length in enumerate(lengths):
			if length <= rem_length:
				max_profit = max(max_profit, prices[idx] + max_profit_recursive(rem_length - length))
		
		return max_profit

	return max_profit_recursive(rod_length)
  
  TOP DOWN DP:
  TC: rod_len*pieces_length
  def max_profit_td_dp(lengths, prices, rod_length):
    max_profit_cache = [-1]*(rod_length + 1)

    def max_profit_recursive(rem_length):
        nonlocal max_profit_cache
        if rem_length <= 0:
          return 0

        if max_profit_cache[rem_length] == -1:
          max_profit = 0
          for idx, length in enumerate(lengths):
            if length <= rem_length:
              max_profit = max(max_profit, prices[idx] + max_profit_recursive(rem_length - length))

          max_profit_cache[rem_length] = max_profit

        return max_profit_cache[rem_length]


    return max_profit_recursive(rod_length)
  
  Bottom up Dp:
  #TC
  def max_profit_bottom_up_dp(lengths, prices, rod_length):
    max_profit_cache = [0]*(rod_length + 1)

    for rod_len in range(1, rod_length + 1):
      max_profit = 0
      for idx, length in enumerate(lengths):
        if length <= rod_len:
          max_profit = max(max_profit, prices[idx] + max_profit_cache[rod_len - length])
      max_profit_cache[rod_len] = max_profit
    return max_profit_cache[rod_length]
    
Add max_len contributing to profit at each rod_len while calc the max_profit. and then backtrack and find the length contributing to the max_profit.
    
14
0:00:00.000227 - brute force
14
0:00:00.000078 - top down
14
0:00:00.000064 - bottom up

COIN CHANGE

BRUTE FORCE

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
      
      
      def coin_change_rec(amt_rem, idx_start):
        if amt_rem == 0: 
          return 1
        
        if idx_start >= len(coins) or amt_rem < 0:
          return 0

        
        total_ways = 0
        for coin_idx in range(idx_start, len(coins)):
          total_ways += coin_change_rec(amt_rem - coins[coin_idx], coin_idx)
          
        return total_ways
      

      return coin_change_rec(amount, 0)
      
  OR
  class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
      
      def possible_ways_rec(rem_amount, start_idx):
        
        if rem_amount == 0:
          return 1
        
        if start_idx >= len(coins) or rem_amount < 0: 
          return 0
        
        ways_excluding = possible_ways_rec(rem_amount, start_idx + 1)
        
        ways_including = 0
        if coins[start_idx] <= rem_amount:
          ways_including = possible_ways_rec(rem_amount - coins[start_idx], start_idx)
          
        return ways_including + ways_excluding
      
      return possible_ways_rec(amount, 0)
        
	
TOP DOWN
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
      
      def possible_ways_rec(rem_amount, start_idx):
        nonlocal cache
        if rem_amount == 0:
          return 1
        
        if start_idx >= len(coins) or rem_amount < 0: 
          return 0
        
        if cache[start_idx][rem_amount] == -1:
          
          ways_excluding = possible_ways_rec(rem_amount, start_idx + 1)

          ways_including = 0
          if coins[start_idx] <= rem_amount:
            ways_including = possible_ways_rec(rem_amount - coins[start_idx], start_idx)
          cache[start_idx][rem_amount] = ways_excluding + ways_including
          
        return cache[start_idx][rem_amount]
      
      cache = [[-1]*(amount +1) for idx in range(len(coins))]
      return possible_ways_rec(amount, 0)
      
 BOTTOM UP
 
 class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        
        
        
        cache = [[0]*(amount + 1) for i in range(len(coins) + 1)]
        
        cache[0][0] = 1
        
        for coin_idx in range(1, len(coins) + 1):
          for amt in range(amount + 1):
            
            cache[coin_idx][amt] += cache[coin_idx - 1][amt]
            if coins[coin_idx - 1] <= amt:
              cache[coin_idx][amt] += cache[coin_idx][amt - coins[coin_idx-1]]
              
        return cache[len(coins)][amount]
           
	   
BOTTOM UP SPACE OPTIMISED
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        
        
        
        cache = [[0]*(amount + 1) for i in range(len(coins) + 1)]
        
        prev = [0]*(amount + 1)
        curr = [0]*(amount + 1)
        prev[0] = 1
        
        for coin_idx in range(len(coins)):
          for amt in range(amount + 1):
            curr[amt] = prev[amt]
            if coins[coin_idx] <= amt:
              curr[amt] += curr[amt - coins[coin_idx]]
          prev, curr = curr, prev
              
        return prev[amount]
        
